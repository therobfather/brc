@use "sass:map";

/* UIKit: Button */
.uk-button {
    --btn-shadow-color: transparent;
    box-sizing: border-box;
    position: relative;
    display: var(--button-display);
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
    background: none;
    font-family: var(--button-font-typeface, sans-serif);
    font-weight: var(--button-font-weight, 700);
    text-transform: var(--button-font-transform, initial);
    font-size: var(--button-font-size);
    height: var(--button-height);
    padding: var(--button-padding);
    margin: var(--button-margin);
    color: inherit;
    text-align: var(--button-align-text);
    text-decoration: none;
    line-height: 1;
    letter-spacing: var(--button-font-spacing, normal);
    vertical-align: top;
    border: 0;
    border-radius: var(--button-border-radius, 0);
    outline: none;
    cursor: pointer;
    transition: 200ms ease;
    @include dark-prop('color', inherit, white);

    &::before {
        content: "";
        position: absolute;
        border-radius: inherit;
        inset: 0px;
        box-shadow: inset 0 0 0 var(--button-border-width, 0) var(--btn-shadow-color);
        transition: 200ms ease;
    }

    &:hover,
    &:focus {
        @include dark-prop('color', rgb( 0 0 0 / 50% ), rgb( 255 255 255 / 50% ));
    }

    &-justify {
        justify-content: space-between;
        padding: 0 calc(var(--sizes-button-medium-padding) / 2) !important;
    }

    &-link {
        color: inherit;
        padding: 0 !important;
        @include dark-prop('--border-color', var(--color-gray-30) !important, var(--color-gray-80) !important);

        &::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 2px;
            bottom: 20%;
            left: 0;
            background-color: var(--border-color);
        }
        &:hover,
        &:focus {
            color: var(--colors-button-primary-hover);
        }
    }

    &-text {
        padding: 0 !important;
        &::before {
            display: none;
        }
        &::after {
            content: '';
            position: absolute;
            width: 100%;
            transform: scaleX(0);
            height: 2px;
            bottom: 20%;
            left: 0;
            background-color: var(--color-primary);
            transform-origin: bottom right;
            transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);
        }
        &:hover {
            color: var(--color-primary);
            &::after {
                transform: scaleX(1);
                transform-origin: bottom left;
            }
        }
    }

    &-icon {
        width: var(--button-height);
        padding: 0 !important;
    }

    &-gradient {
        color: white !important;

        &::after {
            content: "";
            position: absolute;
            border-radius: inherit;
            inset: 0px;
            z-index: -1;
            transition: 200ms ease;
            @include gradient();
        }

        &:hover::after {
            opacity: .85;
        }

        &.uk-button-outline,
        &.uk-button-ghost {
            background: linear-gradient(var(--gradient-angle), var(--gradient-primary), var(--gradient-secondary));
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            &::after {
                display: none;
            }
        }

        &.uk-button-outline {
            @include dark-prop('--btn-shadow-color', rgba(0 0 0 / 15%), rgba(255 255 255 / 15%));
            &:hover {
                @include dark-prop('--btn-shadow-color', rgba(0 0 0 / 25%), rgba(255 255 255 / 25%));
            }
        }

        &.uk-button-ghost:hover {
            background-clip: unset;
            -webkit-background-clip: unset;
            -webkit-text-fill-color: unset;
        }
    }

    &.uk-button-disabled,
    &:disabled {
        background-color: var(--color-gray-30) !important;
        color: var(--color-gray-60) !important;
        border: 0;
        cursor: not-allowed;
    }

    &.uk-border-circle {
        border-radius: 50%;
    }

    .uk-text-unset {
        @include dark-prop('color', black, white);
    }

    &:not([data-toggle-active]) > * + * {
        margin-left: 8px;
    }
}

// Button Outline
@mixin outline-button( $name, $color ) {

    @include dark-prop('--btn-shadow-color', rgba(0 0 0 / 15%), rgba(255 255 255 / 15%));
    background-color: transparent !important;

    @if $name == 'default' {

        @include dark-prop('color', black, white);

        &.uk-active,
        &:focus,
        &:hover {
            --btn-shadow-color: transparent !important;
            background-color: var(--color-primary) !important;
            color: white !important;
        }

    } @else if $name == 'darkgrey' {

        @include dark-props((
            --btn-shadow-color: (var(--color-darkgrey), white),
            color: (black, white),
        ));

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (var(--color-darkgrey), white),
                color: (white, black),
            ));
        }

    } @else {

        color: var(--color-#{$name}) !important;

        &.uk-active,
        &:focus,
        &:hover {
            --btn-shadow-color: transparent !important;
            background-color: var(--color-#{$name}) !important;
            color: white !important;
        }

    }
}

// Button Ghost
@mixin ghost-button( $name, $color ) {

    background-color: transparent !important;

    @if $name == 'default' {

        @include dark-prop('color', black, white);

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (rgba(0 0 0 / 8%), rgba(255 255 255 / 8%)),
                color: (black, white),
            ));
        }

    } @else if $name == 'darkgrey' {

        @include dark-prop('color', black !important, white !important);

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (var(--color-darkgrey), white),
                color: (white, black),
            ));
        }

    } @else {

        color: var(--color-#{$name}) !important;

        &.uk-active,
        &:focus,
        &:hover {
            background-color: var(--color-#{$name}) !important;
            color: white !important;
        }

    }
}

// Button Alternative
@mixin alternative-button( $name, $color ) {

    background-color: var(--color-#{$name}-10) !important;

    @if $name == 'default' {

        @include dark-props((
            background-color: (rgba(0 0 0 / 8%), rgba(255 255 255 / 8%)),
            color: (black, white),
        ));

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-prop('background-color', rgba(0 0 0 / 15%), rgba(255 255 255 / 15%));
        }

    } @else if $name == 'darkgrey' {

        @include dark-prop('color', black, black);

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (var(--color-darkgrey), white),
                color: (white, black),
            ));
        }

    } @else {

        color: var(--color-#{$name}) !important;

        &.uk-active,
        &:focus,
        &:hover {
            background-color: var(--color-#{$name}) !important;
            color: white !important;
        }

    }
}

// Button Invert
@mixin invert-button( $name, $color ) {

    @include dark-prop('background-color', white !important, var(--color-gray-90));

    @if $name == 'default' {

        color: black !important;

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (var(--color-gray-10), var(--color-gray-80)),
                color: (black, white),
            ));
        }

    } @else if $name == 'darkgrey' {

        color: black !important;

        &.uk-active,
        &:focus,
        &:hover {
            @include dark-props((
                background-color: (var(--color-darkgrey), white),
                color: (white, black),
            ));
        }

    } @else {

        color: var(--color-#{$name}) !important;

        &.uk-active,
        &:focus,
        &:hover {
            background-color: var(--color-#{$name}) !important;
            color: white !important;
        }

    }
}

// Color Modifier
@each $name, $color in map.get($config, 'color') {
    .uk-button-#{$name} {
        background-color: var(--color-#{$name}) !important;
        color: white !important;
        &.uk-active,
        &:focus,
        &:hover {
            background-color: var(--color-#{$name}-40) !important;
            .uk-text-unset {
                color: inherit !important;
            }
        }
        @if $name == 'default' {
            @include dark-props((
                background-color: (rgba(0 0 0 / 8%), rgba(255 255 255 / 8%)),
                color: (black, white),
            ));
            &.uk-active,
            &:focus,
            &:hover {
                background-color: var(--color-primary) !important;
                color: white !important;
            }
        }
        @if $name == 'darkgrey' {
            @include dark-props((
                background-color: (var(--color-darkgrey), white),
                color: (white, black),
            ));
            &.uk-active,
            &:focus,
            &:hover {
                @include dark-props((
                    background-color: (var(--color-darkgrey-40), var(--color-gray-20)),
                    color: (white, black),
                ));
            }
        }
        &.uk-button-outline {
            @include outline-button( $name, $color );
        }
        &.uk-button-ghost {
            @include ghost-button( $name, $color );
        }
        &.uk-button-alt {
            @include alternative-button( $name, $color );
        }
        &.uk-button-invert {
            @include invert-button( $name, $color );
        }
    }
}

// Size Modifier
@include wrap-media() using ($bp) {
    @each $name, $size in map.get($config, 'sizes', 'button') {
        .uk-button-#{$name}#{$bp} {
            font-size: var(--sizes-button-#{$name}-text);
            height: var(--sizes-button-#{$name}-height);
            padding: 0 var(--sizes-button-#{$name}-padding);
            &.uk-button-icon {
                width: var(--sizes-button-#{$name}-height) !important;
            }
            &.uk-button-justify {
                justify-content: space-between;
                padding: 0 calc(var(--sizes-button-#{$name}-padding) / 2) !important;
            }
        }
    }
}
